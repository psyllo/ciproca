* Milestones
** Mock up primary UI and app OS
** App package create, install, delete
package.json (package meta info - generated by 'npm init')
index.html (page that is loaded when app opened)
test.js (test file run in browser - should end in 'OK' or error msg)
** Get PouchDB working and talking to CouchDB including Auth
   http://pouchdb.com/
** Get JS (browser and server-side) talking to CouchDB
   https://github.com/dscape/nano
   https://github.com/Tutorialindustry/node.js/tree/master/nodejs-couchdb-tutorial
   http://www.tutorialindustry.com/node-js-couchdb-tutorial-for-beginners
   https://tanzimsaqib.wordpress.com/2015/05/25/crud-with-couchdb-in-node-js/
   (bottom) https://thebhwgroup.com/blog/2015/03/website-dev-clojure-reagent
* CEF Sandbox TODOs
** Security
*** App Tokens
    Currently a 3rd Party app can run core app code if they create a
    link to a core URL and target _top. This is not acceptable. In
    addition, one app may be able to run another apps code in a
    similar fashion. This can be solved with tokens.
**** Solution #1 - one token per app
     For a core app page or any other app's page to be opened the
     corresponding app token must be provided in the request. This
     means every link will contain a token. For a core app to launch
     another core page it will provide the token in the URL. Likewise
     for a core app to open a 3rd party app it must also provide a
     token, there is no exceptions. The very first core page that is
     opened is requested from C++ and will be passed in a token that
     it will pass on to other core pages when those requests are
     mode. (http://core-host/foo?apptoken=AXQJZFE) All requests with bad
     tokens are logged and apps can be flagged and quarantined
     accordingly.
**** Solution #2 - token only for pop-ups. (currently implemented)
     Deny any RT_MAIN_FRAME resource type requests after initial.
     Since this will prevent pop-ups in addition to denying
     target=_top and if pop-ups are ever desirable then pop-ups can
     require a token in the request URL. The token must match the
     token for the app being requested or be core's token.
*** "sandbox" CEF feature not working on Windows
**** http://magpcss.org/ceforum/apidocs3/projects/(default)/cef_sandbox_win.h.html
**** Not currently working on windows. Need to set it up.
**** 'no_sandbox' is getting set to true, because it is not setup properly
#if !defined(CEF_USE_SANDBOX)
  settings.no_sandbox = true;
#endif
* Desktop icons per app
  Allow apps to run in their own window and give them desktop
  icons. This way apps are more independent.

  The core app which contains settings and the app management
  interface (uninstalls) will have its own icon.
* App Management
** App Store Core App
*** Needs WAN access
*** Self-contained previews
    Contained in a 'preview' directory, all preview screenshots,
    video, descriptions.
** Install
*** Install from web

* Electron
  http://electron.atom.io/
** Can the sandbox I created with CEF be implemented on Electron?
   If so, then it maybe be better to target Electron.
* 3rd Party App databases and logging
** Log progress and events through a logging API
*** Reloading state from log
   Apps can get their log history and rebuild their in-browser
   database as needed.
** Save File REST API
*** Description
**** REST - PUT, POST, GET, DELETE /save/db.json
**** Files in 'save' directory can be overwritten
**** Files suffix will always be <chosen name>.txt
*** Limitations
**** Size. Loading the entire db into browser memory will be the tendency
     Though it can be overcome by some planning, developer tendency
     will be to work with the entire database in memory. If the db
     becomes too large they will have to load only parts at a time.
* WAN Access
** Proxy
**** Toggle
     Turn proxy on/off easily - default to on
** Payment
*** Bitcoin
**** Benefits
***** Anonymous
***** Purchase directly from dev
*** PayPal - not directly from dev
**** Benefits
***** Purchase directly from dev
* CouchDB config
** CORS
*** Add something like this to CouchDB local.ini
[CORS]
; List of accepted methods, comma-separated
; refer to http://tools.ietf.org/html/rfc2616, rfc2817, rfc5789
methods = GET, POST, PUT, DELETE
; List of origins, separated by a comma (protocol, host, port)
; refer to http://tools.ietf.org/html/rfc6454 for specification
origins = http://localhost:10000
*** Reference
https://wiki.apache.org/couchdb/CORS
* Create intro using reveal.js
http://lab.hakim.se/reveal-js/
http://slides.com/
* Related Links
** wxWidgets wrapper for CEF
   https://github.com/steve-lamerton/wxWebViewChromium
* JavaScript
** JavaScript Event Order
    http://www.quirksmode.org/js/events_order.html
** ClojureScript + Reagent (preferred choice) + re-frame (maybe)
** ClojureScript general
    https://www.youtube.com/watch?v=6_mbxaRDA-s
    https://youtu.be/6_mbxaRDA-s?t=2344
    (fast JSON parsing) https://github.com/cognitect/transit-cljs
    https://github.com/bhauman/lein-figwheel
*** ClojureScript DOM tools
    (old-ish) http://www.davedellacosta.com/cljs-dom-survey
** Re-com
   (GUI Components) https://github.com/Day8/re-com
** Re-frame
   (re-frame) https://github.com/Day8/re-frame#what-problem-does-it-solve
   (reactive programming) https://gist.github.com/staltz/868e7e9bc2a7b8c1f754
** Reagent
    https://github.com/reagent-project/reagent
    https://github.com/reagent-project/reagent-template
    (reagent cookbook) https://github.com/reagent-project/reagent-cookbook/tree/master/recipes/bootstrap-modal
    https://github.com/reagent-project/reagent-forms
    http://www.michielborkent.nl/slides/react-amsterdam-feb-12-2015.pdf
** Utilities
*** CouchDB + ClojureScript
    Pretty much just need to use PouchDB directly then sync. Looks
    like the best option.
    Someone wrote a simple wrapper: http://nikolamandic.me/?p=130
*** Cljs-d3
*** HTML/CSS/JS web creator share-er
    http://jsfiddle.net/nMNJE/
    http://plnkr.co/
*** Tiny Scrollbar
    http://baijs.com/tinyscrollbar/
    Supports dynamic loading of content
*** Material Icons
    https://www.google.com/design/icons/
*** Left-hand nav
    http://codepen.io/mildrenben/pen/GJgMvQ
** Frameworks I decided against
*** Angular
*** Flux (or RefluxJS)
    https://facebook.github.io/react/blog/2014/05/06/flux.html
    https://scotch.io/tutorials/getting-to-know-flux-the-react-js-architecture
*** Material UI
    (material + reagent)  https://github.com/tuhlmann/reagent-material
    https://gist.github.com/taylorSando/9f779d58a34939e38f8b
    https://groups.google.com/forum/#!topic/reagent-project/PObizfFMWes
    https://gist.github.com/danielytics/d4374cd51deec7201250
    http://stackoverflow.com/questions/31591479/how-to-create-material-ui-component-in-om-clojurescript
*** RiotJS
    http://riotjs.com/
*** Mithril (fast, simple, light, does less)
    https://lhorie.github.io/mithril-blog/lessons-learned-from-angular.html
    https://github.com/lhorie/mithril-presentation-oct-js-tech-night
*** Polymer
    http://www.polymer-project.org/
    http://webcomponents.org/
    (Theme Builder) https://customelements.io/robrez/poly-theme-builder/
* P2P
  http://www.webrtc.org/
* Ad & Recommendations generation and delivery
** Steps
*** Disconnectedly algorithmically summarize user interests
*** User review of interests (approval/disapproval per item)
**** Users have the opportunity to omit any interest
     Use case: If a male user has content related to female hygiene
     products because he researched something for his wife one time,
     he will be able to remove those topics from the summary of
     interests to prevent that ad targeting.
*** Through an anonymous Internet connection submit this summary
*** Receive an ad package that can be delivered as apps see fit.
